# -*- coding: utf-8 -*-
"""M1S5-AtividadesPráticas-Jupiter.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w7BALG5RPqvFyS4h8zpYLY-FHYdszgge

#**Revisão do conteúdo até M1S3**

*   Variáveis
*   Operações Básicas (+, -, *, /) | (> < == !=) | (and or not)
*   Estruturas condicionais (if | elif | else)
*   Estruturas de Repetição (while | for)
"""

#Exemplo 1 - Operações Básicas
"""Faça um programa para computar a média de um aluno, dadas duas notas."""
nota1 = float(input("Digite a nota da prova 1: "))
nota2 = input("Digite a nota da prova 2: ")
nota2 = float(nota2)
media = (nota1+nota2)/2
print(f"A nota do aluno é: {media:.2f}")

#Exemplo 2 - Estruturas condicionais
"""Faça um programa para computar a média de um aluno e verificar se este aluno foi aprovado, reprovado ou está de recuperação."""
nota1 = 5.9
nota2 = 4.8
media = (nota1+nota2)/2
print(f"A nota do aluno é: {media:.2f}")
# Reprovado | R | Aprovado
# 0 1 2 3 4 5 6 7 8 9 10
if media >= 7:
  print("Aprovado")
elif media < 5:
  print("Reprovado")
elif media < 6:
  print("Recuperação Nivel 1")
else:
  print("Recuperação Nivel 2")

#Exemplo3 - Estruturas de Repetição
"""Faça um programa para computar a média de N alunos e contar a quantidade de alunos aprovados, reprovados e de recuperação."""
quantidade_alunos = int(input("Digite a quantidade de alunos: "))

#for aluno in range(quantidade_alunos):
aluno = 0
aprovados = 0
reprovados = 0
while aluno < quantidade_alunos:
  print(f"Digite as notas do aluno {aluno}")
  nota1 = float(input("Digite a nota 1: "))
  nota2 = float(input("Digite a nota 2: "))
  media = (nota1+nota2)/2
  print(f"A nota do aluno é: {media:.2f}")

  #Verifica aprovação do aluno
  if media >= 7:
    print("Aprovado")
    aprovados += 1
  elif media < 5:
    print("Reprovado")
    reprovados += 1
  else:
    print("Recuperação")
  aluno += 1

"""#**Revisão do conteúdo semanal (M1S4)**

*   Listas
*   Tuplas
*   Dicionários
*   Funções
*   Classes e POO

##Listas
"""

quantidade_alunos = int(input("Digite a quantidade de alunos: "))

aluno = 0
aprovados = []
reprovados = []
em_recuperacao = []
while aluno < quantidade_alunos:
  print(f"Digite as notas do aluno {aluno}")
  nome = input("Digite o nome do aluno: ")
  nota1 = float(input("Digite a nota 1: "))
  nota2 = float(input("Digite a nota 2: "))
  media = (nota1+nota2)/2
  print(f"A nota do aluno é: {media:.2f}")

  #Verifica aprovação do aluno
  if media >= 7:
    print("Aprovado")
    aprovados.append(nome)
  elif media < 5:
    print("Reprovado")
    reprovados.append(nome)
  else:
    print("Recuperação")
    em_recuperacao.append(nome)
  aluno += 1

print("Aprovados:", aprovados)
print("Reprovados:", reprovados)
print("Recuperacao:", em_recuperacao)

nomes = ["Sherlon", "Romulo", "Junior"]
nomes.append("Kamilla")
nomes.sort()
nomes

"""##Tuplas"""



"""##Dicionários"""



"""##Funções"""

#Exemplo 4
"""Faça uma função para computar e retornar a média de 2 números."""
def calcula_media():
  nota1 = float(input("Digite a nota 1: "))
  nota2 = float(input("Digite a nota 2: "))
  media = (nota1+nota2)/2
  print(f"A nota do aluno é: {media:.2f}")
  return media

#Verifica aprovação do aluno
def verifica_situacao_aluno(media, nome):
  global aprovados, reprovados, em_recuperacao
  if media >= 7:
    print("Aprovado")
    aprovados.append(nome)
  elif media < 5:
    print("Reprovado")
    reprovados.append(nome)
  else:
    print("Recuperação")
    em_recuperacao.append(nome)

aprovados = []
reprovados = []
em_recuperacao = []
quantidade_alunos = int(input("Digite a quantidade de alunos: "))
for aluno in range(quantidade_alunos):
  print(f"Digite as notas do aluno {aluno}")
  nome = input("Digite o nome do aluno: ")
  media = calcula_media()
  verifica_situacao_aluno(media, nome)

print("Aprovados:", aprovados)
print("Reprovados:", reprovados)
print("Recuperacao:", em_recuperacao)

#Recursividade
def enquanto (nome, inicio, fim):
  if inicio < fim:
    print(nome[inicio])
    enquanto(nome, inicio+1, fim)

nome = "Sherlon"
enquanto(nome, 0, len(nome))

#Exemplo 5
"""Faça uma função para computar e retornar a média de N valores.."""

"""##Classes e Programação Orientada a Objetos (POO) ([Referência](https://tmfilho.github.io/pyestbook/objects/02_cpyt.html))"""

class Pessoa:
  #Construtor (inicializa o objeto)
  def __init__(self, nome):
    #Atributos (como variáveis)
    self.name = nome
  
  #Metodo (como funções)
  def mostrar_nome(self):
    print(self.name)

nome = "Sherlon"
pessoa = Pessoa(nome)

pessoa.mostrar_nome()

"""#Prática Colaborativa (DOJO)

Uma revendedora de veículos usados precisa da sua ajuda para desenvolver um sistema de armazenamento de informações e realização de consultas em sua relação de carros e motos à pronta entrega.

Você precisa:
*   Criar uma classe Veículos com os seguintes atributos:
    *   ID: 25 (Identificação única no estoque)
    *   Tipo: Carro, Moto, etc...
    *   Marca: Chevrolet, etc...
    *   Modelo: Monza, etc...
    *   Placa: ABC0311
    *   Número de rodas: 2, 4, etc...
    *   Ano: 2008, etc
    *   Preço: 12560.50
*   Desenvolver os seguintes métodos:
    *   Cadastrar novo veículo no Estoque.
    *   Atualizar informações de um veículo.
    *   Mostrar veículos a partir de um certo ano.
    *   Mostrar veículos a partir de um certo preço.
"""

#Código feito em aula
class Veiculo:
  #Programar a partir daqui

#Gabarito
class Veiculo:
    def __init__(self, ID):
        self.id = ID
        self.tipo = None
        self.marca = None
        self.modelo = None
        self.placa = None
        self.rodas = None
        self.ano = None
        self.preco = None
        self.cor = None
    
    def cadastro(self):
      self.tipo = input("Digite o tipo do veiculo: ")
      #self.marca = input("Digite a marca: ")
      #self.modelo = input("Digite o modelo: ")
      #self.placa = input("Digite a placa: ")
      #self.rodas = int(input("Informe a quantidade de rodas: "))
      self.ano = int(input("Informe o ano: "))
      self.preco = float(input("Informe o preço: "))
      #self.cor = input("Informe a cor: ")
    
    def mostra_veiculo(self):
      print(self.tipo)
      #print(self.marca)
      #print(self.modelo)
      #print(self.placa)
      #print(self.rodas)
      print(self.ano)
      print(self.preco)
      #print(self.cor)
    
    def filtra_por_ano(self, ano):
      if self.ano > ano:
        self.mostra_veiculo()
    
    def filtra_por_preco(self, preco):
      if self.preco > preco:
        self.mostra_veiculo()
    
    def atualizar_cadastro(self):
      self.cadastro()

id = 0 #É um numero único para ser o código de cada veículo
estoque = [] #Armazena todos os veículos do estoque
while True:
  #Cria um objeto da classe Veiculo()
  obj = Veiculo(id)
  
  print("---------- Seja bem-vindo à concessionária PD12 ----------")
  print("Opções:\n1-Cadastro,\n2-Visualizar por ano,\n3-Visualizar por preco,\n4-Atualizar cadastro\n0-SAIR\n")
  opcao = int(input("Digite o que você deseja: "))
  
  #Sair do programa
  if opcao == 0:
    print("Obrigado por usar nosso sistema! Até mais!")
    break
  
  #Cadastro
  elif opcao == 1:
    print("---------- CADASTRO DE VEÍCULOS ----------")
    obj.cadastro()
    estoque.append(obj)
    id += 1
  
  #Mostrar por ano
  elif opcao == 2:
    print("---------- FILTRANDO POR ANO ----------")
    ano = int(input("Digite um ano: "))
    tamanho = len(estoque)
    for i in range(tamanho):
      estoque[i].filtra_por_ano(ano)
      print("")
  
  #Mostrar por preco
  elif opcao == 3:
    print("---------- FILTRANDO POR PRECO ----------")
    preco = int(input("Digite um preco minimo: "))
    tamanho = len(estoque)
    for i in range(tamanho):
      estoque[i].filtra_por_preco(preco)
      print("")
  
  #Atualiza cadastro
  elif opcao == 4:
    print("---------- ATUALIZAÇÃO DE CADASTRO ----------")
    codigo = int(input("Digite o ID do veículo a ser modificado: "))
    
    tamanho = len(estoque)
    for i in range(tamanho):
      if estoque[i].id == codigo:
        estoque[i].atualizar_cadastro() #Atualizamos o cadastro de um veiculo dado o seu código (CASO ELE EXISTA)

  else:
    print("Esta opção não é válida!")